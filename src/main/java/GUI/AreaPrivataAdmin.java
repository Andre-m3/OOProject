package GUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import controller.Controller;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Locale;

public class AreaPrivataAdmin {
    private JFrame FrameAreaAdmin;
    private Controller controller;
    private JPanel panel1;
    private JPanel topPanel;
    private JLabel welcomeText;
    private JLabel subText;
    private JPanel infoPanel;
    private JLabel usernameValue;
    private JLabel emailValue;
    private JPanel bottomPanel;
    private JButton btnHomepage;
    private JLabel spacerBypass;
    private JButton btnModificaDati;

    public AreaPrivataAdmin(JFrame frameDash) {

        controller = Controller.getInstance();
        FrameAreaAdmin = new JFrame("Area Personale");
        FrameAreaAdmin.setContentPane(panel1);
        /* Non vogliamo che alla chiusura venga terminata l'esecuzione del programma! (exit_on_close)
         * Facendo 'dispose_on_close' abbiamo il controllo sulla chiusura della finestra...
         * Aggiungeremo un Listener (WindowsListener) per gestire la chiusura della finestra e tornare alla Dashboard Admin
         */
        FrameAreaAdmin.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        FrameAreaAdmin.pack();
        FrameAreaAdmin.setLocationRelativeTo(null);
        FrameAreaAdmin.setVisible(true);
        FrameAreaAdmin.setResizable(false);

        setupButtons();
        loadUserInfo();


        // Aggiungiamo il listener per il pulsante Homepage
        btnHomepage.addActionListener(e -> {
            FrameAreaAdmin.dispose();
            frameDash.setVisible(true);
        });

        /* Questa volta necessitiamo di un WindowListener
         * Il metodo windowClosing() viene chiamato quando si preme il pulsante X
         * CosÃ¬ torniamo alla dashboard admin quando questa finestra viene chiusa
         */
        FrameAreaAdmin.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                frameDash.setVisible(true);
            }
        });
    }

    private void setupButtons() {
        // Impostiamo i pulsanti con lo stesso stile utilizzato nelle altre interfacce!
        Color sfondoLeggermenteScuro = new Color(214, 214, 214);

        // Pulsante HOMEPAGE
        btnHomepage.setBackground(sfondoLeggermenteScuro);
        btnHomepage.setForeground(new Color(78, 78, 78));
        btnHomepage.setFocusPainted(false);
        btnHomepage.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(193, 193, 193), 2),
                BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        btnHomepage.setOpaque(true);

        // Pulsante MODIFICA PRENOTAZIONE
        btnModificaDati.setBackground(sfondoLeggermenteScuro);
        btnModificaDati.setForeground(new Color(78, 78, 78));
        btnModificaDati.setFocusPainted(false);
        btnModificaDati.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(193, 193, 193), 2),
                BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        btnModificaDati.setOpaque(true);


    }

    private void loadUserInfo() {
        // Carichiamo i dati dell'utente (username ed email) nell'infoPanel
        usernameValue.setText(controller.getUtenteLoggato().getUsername());
        emailValue.setText(controller.getUtenteLoggato().getEmail());
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel1.setMaximumSize(new Dimension(700, 500));
        panel1.setMinimumSize(new Dimension(700, 500));
        panel1.setPreferredSize(new Dimension(700, 500));
        topPanel = new JPanel();
        topPanel.setLayout(new BorderLayout(5, 2));
        topPanel.setMaximumSize(new Dimension(620, 125));
        topPanel.setMinimumSize(new Dimension(620, 125));
        topPanel.setPreferredSize(new Dimension(620, 125));
        panel1.add(topPanel);
        welcomeText = new JLabel();
        Font welcomeTextFont = this.$$$getFont$$$("JetBrains Mono SemiBold", Font.PLAIN, 48, welcomeText.getFont());
        if (welcomeTextFont != null) welcomeText.setFont(welcomeTextFont);
        welcomeText.setHorizontalAlignment(0);
        welcomeText.setHorizontalTextPosition(0);
        welcomeText.setMaximumSize(new Dimension(800, 64));
        welcomeText.setMinimumSize(new Dimension(800, 64));
        welcomeText.setPreferredSize(new Dimension(800, 64));
        welcomeText.setText("Area Personale");
        welcomeText.setVerticalAlignment(3);
        welcomeText.setVerticalTextPosition(3);
        topPanel.add(welcomeText, BorderLayout.CENTER);
        subText = new JLabel();
        Font subTextFont = this.$$$getFont$$$("JetBrains Mono Medium", Font.PLAIN, 20, subText.getFont());
        if (subTextFont != null) subText.setFont(subTextFont);
        subText.setHorizontalAlignment(0);
        subText.setHorizontalTextPosition(0);
        subText.setMaximumSize(new Dimension(800, 17));
        subText.setMinimumSize(new Dimension(800, 17));
        subText.setPreferredSize(new Dimension(800, 17));
        subText.setText("Ecco tutte le tue informazioni private!");
        subText.setVerticalAlignment(0);
        subText.setVerticalTextPosition(0);
        topPanel.add(subText, BorderLayout.SOUTH);
        infoPanel = new JPanel();
        infoPanel.setLayout(new GridLayoutManager(2, 2, new Insets(5, 0, 5, 100), 10, 0));
        infoPanel.setMaximumSize(new Dimension(620, 120));
        infoPanel.setMinimumSize(new Dimension(620, 120));
        infoPanel.setPreferredSize(new Dimension(620, 120));
        panel1.add(infoPanel);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("JetBrains Mono SemiBold", Font.PLAIN, 16, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setHorizontalAlignment(2);
        label1.setText("Username: ");
        label1.setVerticalAlignment(0);
        label1.setVerticalTextPosition(0);
        infoPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_SOUTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(300, 30), new Dimension(300, 30), new Dimension(300, 30), 0, false));
        usernameValue = new JLabel();
        Font usernameValueFont = this.$$$getFont$$$("JetBrains Mono Light", Font.PLAIN, 16, usernameValue.getFont());
        if (usernameValueFont != null) usernameValue.setFont(usernameValueFont);
        usernameValue.setText("miaUsername");
        infoPanel.add(usernameValue, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_SOUTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(300, 30), new Dimension(300, 30), new Dimension(300, 30), 0, false));
        emailValue = new JLabel();
        Font emailValueFont = this.$$$getFont$$$("JetBrains Mono Light", Font.PLAIN, 16, emailValue.getFont());
        if (emailValueFont != null) emailValue.setFont(emailValueFont);
        emailValue.setText("miaEmail");
        infoPanel.add(emailValue, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(300, 30), new Dimension(300, 30), new Dimension(300, 30), 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$("JetBrains Mono SemiBold", Font.PLAIN, 16, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setHorizontalAlignment(2);
        label2.setText("Email: ");
        infoPanel.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, new Dimension(300, 30), new Dimension(300, 30), new Dimension(300, 30), 0, false));
        bottomPanel = new JPanel();
        bottomPanel.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        bottomPanel.setMaximumSize(new Dimension(620, 80));
        bottomPanel.setMinimumSize(new Dimension(620, 80));
        bottomPanel.setPreferredSize(new Dimension(620, 80));
        panel1.add(bottomPanel);
        btnHomepage = new JButton();
        Font btnHomepageFont = this.$$$getFont$$$("JetBrains Mono Medium", Font.PLAIN, 12, btnHomepage.getFont());
        if (btnHomepageFont != null) btnHomepage.setFont(btnHomepageFont);
        btnHomepage.setLabel("Homepage");
        btnHomepage.setMaximumSize(new Dimension(90, 40));
        btnHomepage.setMinimumSize(new Dimension(90, 40));
        btnHomepage.setPreferredSize(new Dimension(90, 40));
        btnHomepage.setText("Homepage");
        bottomPanel.add(btnHomepage);
        spacerBypass = new JLabel();
        spacerBypass.setMaximumSize(new Dimension(435, 0));
        spacerBypass.setMinimumSize(new Dimension(435, 0));
        spacerBypass.setPreferredSize(new Dimension(435, 0));
        spacerBypass.setText("");
        bottomPanel.add(spacerBypass);
        btnModificaDati = new JButton();
        btnModificaDati.setMaximumSize(new Dimension(80, 40));
        btnModificaDati.setMinimumSize(new Dimension(80, 40));
        btnModificaDati.setPreferredSize(new Dimension(80, 40));
        btnModificaDati.setText("Modifica");
        bottomPanel.add(btnModificaDati);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
