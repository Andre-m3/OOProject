package GUI;

import controller.Controller;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

/**
 * The type Dialog aggiorna gate.
 */
public class DialogAggiornaGate extends JDialog {
    private JPanel panel1;
    private JPanel mainPanel;
    private JComboBox<String> cbGate;
    private JPanel buttonPanel;
    private JButton btnSalva;
    private JButton btnAnnulla;

    private Controller controller;
    private String numeroVolo;

    // Non visto a lezione: È un pattern per comunicare al dialog che bisogna aggiornare la tabella dopo una modifica
    // Altrimenti la tabella (in questo caso di "VoliAdmin") non visualizzerebbe (subito) i nuovi dati impostati in seguito alla modifica/aggiornamento del volo/gate
    private Runnable onSaveCallback;

    /**
     * Instantiates a new Dialog aggiorna gate.
     *
     * @param parent         the parent
     * @param numeroVolo     the numero volo
     * @param onSaveCallback the on save callback
     */
    public DialogAggiornaGate(JFrame parent, String numeroVolo, Runnable onSaveCallback) {
        super(parent, "Aggiorna Gate - Volo: " + numeroVolo, true);

        this.controller = Controller.getInstance();
        this.numeroVolo = numeroVolo;
        this.onSaveCallback = onSaveCallback;

        // Verifica che sia un volo in partenza, altrimenti visualizziamo un messaggio di errore e torniamo a "VoliAdmin"
        String[] datiVolo = controller.getDatiVolo(numeroVolo);
        if (datiVolo == null) {
            JOptionPane.showMessageDialog(parent,
                    "Volo non trovato!",
                    "Errore",
                    JOptionPane.ERROR_MESSAGE);
            dispose();
            return;
        }

        setContentPane(panel1);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        pack();
        setLocationRelativeTo(parent);

        // Impostiamo la Combobox
        setupComboBox();

        // Configura gli eventi
        setupEvents();

        setVisible(true);
    }

    private void setupComboBox() {
        // Popoliamo la ComboBox con i vari valori (gate). Abbiamo 9 gate, in aggiunta l'admin può decidere di "rimuovere" il gate selezionando "Nessun Gate" (null)
        String[] gateOptions = {"Nessun gate", "Gate 1", "Gate 2", "Gate 3", "Gate 4",
                "Gate 5", "Gate 6", "Gate 7", "Gate 8", "Gate 9"};

        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(gateOptions);
        cbGate.setModel(model);

        // Impostiamo il valore corrente
        String gateCorrente = controller.getGateVoloStringa(numeroVolo);
        if (gateCorrente != null) {
            cbGate.setSelectedItem("Gate " + gateCorrente);
        } else {
            cbGate.setSelectedItem("Nessun gate");
        }
    }

    // Cosa facciamo quando viene cliccato il tasto "Salva" oppure "Annulla"? (Listeners)
    // Essendo solo due, e di lettura semplice, li carichiamo tramite metodo, per averli più compatti e visibili
    private void setupEvents() {
        btnSalva.addActionListener(e -> salvaGate());
        btnAnnulla.addActionListener(e -> dispose());
    }

    private void salvaGate() {
        String selectedGate = (String) cbGate.getSelectedItem();
        Short nuovoGate = null;

        if (!"Nessun gate".equals(selectedGate)) {
            String numeroGate = selectedGate.replace("Gate ", "");
            nuovoGate = Short.parseShort(numeroGate);
        }

        boolean success = controller.aggiornaGateImbarco(numeroVolo, nuovoGate);

        if (success) {
            // (Callback) per aggiornare la tabella (ci troviamo in VoliAdmin)
            if (onSaveCallback != null) {
                onSaveCallback.run();       // Se è stato aggiornato, questa riga esegue l'aggiornamento
            }

            // Salvate le modifiche (Evento "Salva") mostriamo un messaggio all'utente!
            JOptionPane.showMessageDialog(this,
                    "Gate aggiornato con successo!",
                    "Successo",
                    JOptionPane.INFORMATION_MESSAGE);

            dispose();
        } else {
            // In caso di errore, mostriamo un messaggio di errore
            JOptionPane.showMessageDialog(this,
                    "Errore durante l'aggiornamento del gate!",
                    "Errore",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setMaximumSize(new Dimension(300, 150));
        panel1.setMinimumSize(new Dimension(300, 150));
        panel1.setPreferredSize(new Dimension(300, 150));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(buttonPanel, gbc);
        btnSalva = new JButton();
        Font btnSalvaFont = this.$$$getFont$$$("JetBrains Mono Medium", Font.PLAIN, 12, btnSalva.getFont());
        if (btnSalvaFont != null) btnSalva.setFont(btnSalvaFont);
        btnSalva.setMaximumSize(new Dimension(80, 35));
        btnSalva.setMinimumSize(new Dimension(80, 35));
        btnSalva.setPreferredSize(new Dimension(80, 35));
        btnSalva.setText("Salva");
        buttonPanel.add(btnSalva);
        btnAnnulla = new JButton();
        Font btnAnnullaFont = this.$$$getFont$$$("JetBrains Mono Medium", Font.PLAIN, 12, btnAnnulla.getFont());
        if (btnAnnullaFont != null) btnAnnulla.setFont(btnAnnullaFont);
        btnAnnulla.setMaximumSize(new Dimension(80, 35));
        btnAnnulla.setMinimumSize(new Dimension(80, 35));
        btnAnnulla.setPreferredSize(new Dimension(80, 35));
        btnAnnulla.setText("Annulla");
        buttonPanel.add(btnAnnulla);
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(mainPanel, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("Seleziona Gate:");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label1, gbc);
        cbGate = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(cbGate, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * $$$ get root component $$$ j component.
     *
     * @return the j component
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}