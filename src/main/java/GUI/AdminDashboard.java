package GUI;

import com.intellij.uiDesigner.core.GridLayoutManager;
import controller.Controller;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

public class AdminDashboard {
    private static JFrame FrameAdmin;
    private JPanel panel1;
    private JPanel topPanel;
    private JLabel welcomeText;
    private JPanel btnsPanel;
    private JButton button1;
    private JButton button2;
    private JButton button3;
    private JButton button4;

    public static void main(String[] args) {
        FrameAdmin = new JFrame("Dashboard Admin");
        FrameAdmin.setContentPane(new AdminDashboard().panel1);
        FrameAdmin.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        FrameAdmin.pack();
        FrameAdmin.setLocationRelativeTo(null);         // Centra la finestra sullo schermo
        FrameAdmin.setVisible(true);

        // Momentaneo in via precauzionale
        FrameAdmin.setResizable(false);

    }

    public AdminDashboard() {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel1.setMaximumSize(new Dimension(1000, 675));
        panel1.setMinimumSize(new Dimension(1000, 675));
        panel1.setPreferredSize(new Dimension(1000, 675));
        topPanel = new JPanel();
        topPanel.setLayout(new BorderLayout(5, 5));
        Font topPanelFont = this.$$$getFont$$$("Droid Sans Mono", Font.BOLD, 36, topPanel.getFont());
        if (topPanelFont != null) topPanel.setFont(topPanelFont);
        topPanel.setMaximumSize(new Dimension(1000, 190));
        topPanel.setMinimumSize(new Dimension(1000, 190));
        topPanel.setPreferredSize(new Dimension(1000, 190));
        panel1.add(topPanel);
        welcomeText = new JLabel();
        Font welcomeTextFont = this.$$$getFont$$$("Droid Sans Mono", Font.BOLD, 36, welcomeText.getFont());
        if (welcomeTextFont != null) welcomeText.setFont(welcomeTextFont);
        welcomeText.setHorizontalAlignment(0);
        welcomeText.setHorizontalTextPosition(0);
        welcomeText.setText("Bentornato, Admin!");
        welcomeText.setVerticalAlignment(3);
        welcomeText.setVerticalTextPosition(3);
        topPanel.add(welcomeText, BorderLayout.CENTER);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Droid Sans Mono", Font.PLAIN, 18, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setText("Cosa desideri fare oggi?");
        topPanel.add(label1, BorderLayout.SOUTH);
        btnsPanel = new JPanel();
        btnsPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel1.add(btnsPanel);
        button1 = new JButton();
        button1.setText("Button");
        btnsPanel.add(button1);
        button2 = new JButton();
        button2.setText("Button");
        btnsPanel.add(button2);
        button3 = new JButton();
        button3.setText("Button");
        btnsPanel.add(button3);
        button4 = new JButton();
        button4.setText("Button");
        btnsPanel.add(button4);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
